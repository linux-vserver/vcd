NAME
  vflags - set context capabilities and/or flags
SYNOPSIS
  vflags [-GLS] [-b list] [-c list] [-f list] [-x xid] 
DESCRIPTION
  vflags is used to set system capabilities, context capabilities and/or
  context flags for the given context id.

  The given flag lists are converted to a flags/mask pair.;
  See AVAILABLE FLAGS below
OPTIONS
  Commands  
    -G       Get capabilities/flags
    -L       List available capabilities/flags
    -S       Set capabilities/flags

  Options  
    -b list  System capabilities
    -c list  Context capabilities
    -f list  Context flags
    -x xid   Context ID
LIST FORMAT STRING
  All options accepting the parameter list expect it to be in the following form:

    list = [~]<flag>,[~]<flag>,...

  A list is a comma seperated string of values available for the choosen
  listtype. To clear an already enabled flag, the value should be prefixed with
  the tilde character '~'.
AVAILABLE FLAGS
  System Capabilities  
    1. CHOWN  
        In a system with the [_POSIX_CHOWN_RESTRICTED] option defined,
        this overrides the restriction of changing file ownership and 
        group ownership.
    2. DAC_OVERRIDE  
        Override all DAC access, including ACL execute access 
        if [_POSIX_ACL] is defined. 
        Excluding DAC access covered by LINUX_IMMUTABLE.
    3. DAC_READ_SEARCH  
        Overrides all DAC restrictions, regarding read and search on files 
        and directories, including ACL restrictions, if [_POSIX_ACL] is 
        defined. Excluding DAC access covered by LINUX_IMMUTABLE.
    4. FOWNER  
        Overrides all restrictions about allowed operations on files, where 
        file owner ID must be equal to the user ID, except where FSETID 
        is applicable. It doesn't override MAC and DAC restrictions.
    5. FSETID  
        Overrides the following restrictions, that the effective user ID shall
        match the file owner ID, when setting the S_ISUID and S_ISGID bits on 
        that file; that the effective group ID (or one of the supplementary 
        group IDs) shall match the file owner ID when setting the S_ISGID bit 
        on that file; that the S_ISUID and S_ISGID bits are cleared on 
        successful return from chown(2) (not implemented).
    6. FS_MASK  
        Used to decide between falling back on the old suser() or fsuser().
    7. KILL  
        Overrides the restriction, that the real or effective user ID of a process,
        sending a signal, must match the real or effective user ID of the process,
        receiving the signal.
    8. SETGID  
        Allows setgid(2) manipulation;
        Allows setgroups(2);
        Allows forged gids on socket credentials passing.
    9. SETUID  
        Allows set*uid(2) manipulation (including fsuid);
        Allows forged pids on socket credentials passing.
    10. SETPCAP  
        Transfer any capability in your permitted set to any pid, remove any
        capability in your permitted set from any pid.
    11. LINUX_IMMUTABLE  
        Allow modification of S_IMMUTABLE and S_APPEND file attributes.
    12. NET_BIND_SERVICE  
        Allows binding to TCP/UDP sockets below 1024;
        Allows binding to ATM VCIs below 32.
    13. NET_BROADCAST  
        Allow broadcasting, listen to multicast.
    14. NET_ADMIN  
        Allow interface configuration;
        Allow administration of IP firewall, masquerading and accounting;
        Allow setting debug option on sockets;
        Allow modification of routing tables;
        Allow setting arbitrary process / process group ownership on sockets;
        Allow binding to any address for transparent proxying;
        Allow setting TOS (type of service);
        Allow setting promiscuous mode;
        Allow clearing driver statistics;
        Allow multicasting;
        Allow read/write of devicespecific registers;
        Allow activation of ATM control sockets.
    15. NET_RAW  
        Allow use of RAW sockets;
        Allow use of PACKET sockets.
    16. IPC_LOCK  
        Allow locking of shared memory segments;
        Allow mlock and mlockall (which doesn't really have anything to do with IPC).
    17. IPC_OWNER  
        Override IPC ownership checks.
    18. SYS_MODULE  
        Insert and remove kernel modules; Modify kernel without limit;
        Modify cap_bset.
    19. SYS_RAWIO  
        Allow ioperm/iopl access;
        Allow sending USB messages to any device via /proc/bus/usb.
    20. SYS_CHROOT  
        Allow use of chroot().
    21. SYS_PTRACE  
        Allow ptrace() of any process.
    22. SYS_PACCT  
        Allow configuration of process accounting.
    23. SYS_ADMIN  
        Allow configuration of the secure attention key;
        Allow administration of the random device;
        Allow examination and configuration of disk quotas;
        Allow configuring the kernel's syslog (printk behaviour);
        Allow setting the domainname;
        Allow setting the hostname;
        Allow calling bdflush();
        Allow mount() and umount(), setting up new smb connection;
        Allow some autofs root ioctls;
        Allow nfsservctl; Allow VM86_REQUEST_IRQ;
        Allow to read/write pci config on alpha; Allow irix_prctl on mips (setstacksize);
        Allow flushing all cache on m68k (sys_cacheflush);
        Allow removing semaphores; Used instead of CHOWN to "chown" IPC message queues, semaphores and shared memory;
        Allow locking/unlocking of shared memory segment;
        Allow turning swap on/off;
        Allow forged pids on socket credentials passing;
        Allow setting readahead and flushing buffers on block devices;
        Allow setting geometry in floppy driver;
        Allow turning DMA on/off in xd driver;
        Allow administration of md devices (mostly the above, but some extra ioctls);
        Allow tuning the ide driver;
        Allow access to the nvram device;
        Allow administration of apm_bios, serial and bttv (TV) device;
        Allow manufacturer commands in isdn CAPI support driver;
        Allow reading nonstandardized portions of pci configuration space;
        Allow DDI debug ioctl on sbpcd driver;
        Allow setting up serial ports;
        Allow sending raw qic117 commands;
        Allow enabling/disabling tagged queuing on SCSI controllers and sending arbitrary SCSI commands;
        Allow setting encryption key on loopback filesystem.
    24. SYS_BOOT  
        Allow use of reboot().
    25. SYS_NICE  
        Allow raising priority and setting priority on other (different UID) processes;
        Allow use of FIFO and roundrobin (realtime) scheduling on own processes and setting 
        the scheduling algorithm used by another process.
    26. SYS_RESOURCE  
        Override resource limits. Set resource limits;
        Override quota limits;
        Override reserved space on ext2 filesystem;
        Modify data journaling mode on ext3 filesystem 
        (uses journaling resources); NOTE: ext2 honors fsuid when checking for
        resource overrides, so you can override using fsuid too;
        Override size restrictions on IPC message queues;
        Allow more than 64hz interrupts from the realtime clock;
        Override max number of consoles on console allocation;
        Override max number of keymaps.
    27. SYS_TIME  
        Allow manipulation of system clock;
        Allow irix_stime on mips;
        Allow setting the realtime clock.
    28. SYS_TTY_CONFIG  
        Allow configuration of tty devices; Allow vhangup() of tty.
    29. MKNOD  
        Allow the privileged aspects of mknod().
    30. LEASE  
        Allow taking of leases on files.

  Context Capabilities  
    1. SET_UTSNAME  
    2. SET_RLIMIT  
    3. RAW_ICMP  
    4. SYSLOG  
    5. SECURE_MOUNT  
    6. SECURE_REMOUNT  
    7. BINARY_MOUNT  
    8. QUOTA_CTL  

  Context Flags  
    1. INFO_LOCK  
    2. INFO_SCHED  
    3. INFO_NPROC  
    4. INFO_PRIVATE  
    5. INFO_INIT  
    6. INFO_HIDE  
    7. INFO_ULIMIT  
    8. INFO_NSPACE  
    9. SCHED_HARD  
    10. SCHED_PRIO  
    11. SCHED_PAUSE  
    12. VIRT_MEM  
    13. VIRT_UPTIME  
    14. VIRT_CPU  
    15. VIRT_LOAD  
    16. HIDE_MOUNT  
    17. HIDE_NETIF  
    18. STATE_SETUP  
    19. STATE_INIT  
    20. SC_HELPER  
    21. REBOOT_KILL  
    22. PERSISTANT  
    23. FORK_RSS  
    24. PROLIFIC  
    25. IGNEG_NICE  
    26. ONE_TIME  
    27. INIT_SET  
EXAMPLE
  To be able to use ping(8) inside a context:

      $ vflags -S -x 123 -c RAW_ICMP

  Show current flags/capabilities for a context:

      $ vflags -G -x 123
SEE ALSO
  vcontext(8)
AUTHOR
  Benedikt Boehm <hollow@gentoo.org>
